# coding: utf-8

"""
    Ophicleide REST Server

    The REST API for the Ophicleide Word2Vec server

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class QueryResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, word=None, model=None, results=None):
        """
        QueryResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'word': 'str',
            'model': 'str',
            'results': 'list[QueryResponseResults]'
        }

        self.attribute_map = {
            'id': 'id',
            'word': 'word',
            'model': 'model',
            'results': 'results'
        }

        self._id = id
        self._word = word
        self._model = model
        self._results = results

    @property
    def id(self):
        """
        Gets the id of this QueryResponse.
        Unique identifier for this query response

        :return: The id of this QueryResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this QueryResponse.
        Unique identifier for this query response

        :param id: The id of this QueryResponse.
        :type: str
        """

        self._id = id

    @property
    def word(self):
        """
        Gets the word of this QueryResponse.
        The word the query was run against

        :return: The word of this QueryResponse.
        :rtype: str
        """
        return self._word

    @word.setter
    def word(self, word):
        """
        Sets the word of this QueryResponse.
        The word the query was run against

        :param word: The word of this QueryResponse.
        :type: str
        """

        self._word = word

    @property
    def model(self):
        """
        Gets the model of this QueryResponse.
        The unique identifier for the model used to generate this query

        :return: The model of this QueryResponse.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this QueryResponse.
        The unique identifier for the model used to generate this query

        :param model: The model of this QueryResponse.
        :type: str
        """

        self._model = model

    @property
    def results(self):
        """
        Gets the results of this QueryResponse.
        List of words, with quality values, that match the query

        :return: The results of this QueryResponse.
        :rtype: list[QueryResponseResults]
        """
        return self._results

    @results.setter
    def results(self, results):
        """
        Sets the results of this QueryResponse.
        List of words, with quality values, that match the query

        :param results: The results of this QueryResponse.
        :type: list[QueryResponseResults]
        """

        self._results = results

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
